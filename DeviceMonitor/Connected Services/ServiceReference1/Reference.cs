//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeviceMonitor.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FlightPlan", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class FlightPlan : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceMonitor.ServiceReference1.DescriptionResolving[] DescriptionResolvingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SectoIdBeforeTransferField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string airlinerNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> airlinesIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string airportNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double altitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double angleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string arrivalAirportNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string authorityIdBeforeTransferField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string conditionCommandMsgField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long conditionCommandTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double differenceAltitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> expectArrivalTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> expectDepartureTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> flightPlanIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string flightPlanNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string flightPlanTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string flightPlanTypeCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string flightRulesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string freeTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> gatePositionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string initialCommandFlyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string initialCommandTaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isTempAuthorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isTempSectorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string messageStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string operationAuthorityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string operationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double pitchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> referencePressureValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string registerNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double rollField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string runwayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> sectorRadarIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string sectorRadarNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double speedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ssrNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int visSecondsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> visTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool visableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string wakeFlowTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double xField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double yField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceMonitor.ServiceReference1.DescriptionResolving[] DescriptionResolvings {
            get {
                return this.DescriptionResolvingsField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionResolvingsField, value) != true)) {
                    this.DescriptionResolvingsField = value;
                    this.RaisePropertyChanged("DescriptionResolvings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SectoIdBeforeTransfer {
            get {
                return this.SectoIdBeforeTransferField;
            }
            set {
                if ((object.ReferenceEquals(this.SectoIdBeforeTransferField, value) != true)) {
                    this.SectoIdBeforeTransferField = value;
                    this.RaisePropertyChanged("SectoIdBeforeTransfer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string airlinerNo {
            get {
                return this.airlinerNoField;
            }
            set {
                if ((object.ReferenceEquals(this.airlinerNoField, value) != true)) {
                    this.airlinerNoField = value;
                    this.RaisePropertyChanged("airlinerNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> airlinesId {
            get {
                return this.airlinesIdField;
            }
            set {
                if ((this.airlinesIdField.Equals(value) != true)) {
                    this.airlinesIdField = value;
                    this.RaisePropertyChanged("airlinesId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string airportNo {
            get {
                return this.airportNoField;
            }
            set {
                if ((object.ReferenceEquals(this.airportNoField, value) != true)) {
                    this.airportNoField = value;
                    this.RaisePropertyChanged("airportNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double altitude {
            get {
                return this.altitudeField;
            }
            set {
                if ((this.altitudeField.Equals(value) != true)) {
                    this.altitudeField = value;
                    this.RaisePropertyChanged("altitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double angle {
            get {
                return this.angleField;
            }
            set {
                if ((this.angleField.Equals(value) != true)) {
                    this.angleField = value;
                    this.RaisePropertyChanged("angle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string arrivalAirportNo {
            get {
                return this.arrivalAirportNoField;
            }
            set {
                if ((object.ReferenceEquals(this.arrivalAirportNoField, value) != true)) {
                    this.arrivalAirportNoField = value;
                    this.RaisePropertyChanged("arrivalAirportNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string authorityIdBeforeTransfer {
            get {
                return this.authorityIdBeforeTransferField;
            }
            set {
                if ((object.ReferenceEquals(this.authorityIdBeforeTransferField, value) != true)) {
                    this.authorityIdBeforeTransferField = value;
                    this.RaisePropertyChanged("authorityIdBeforeTransfer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string conditionCommandMsg {
            get {
                return this.conditionCommandMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.conditionCommandMsgField, value) != true)) {
                    this.conditionCommandMsgField = value;
                    this.RaisePropertyChanged("conditionCommandMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long conditionCommandTime {
            get {
                return this.conditionCommandTimeField;
            }
            set {
                if ((this.conditionCommandTimeField.Equals(value) != true)) {
                    this.conditionCommandTimeField = value;
                    this.RaisePropertyChanged("conditionCommandTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double differenceAltitude {
            get {
                return this.differenceAltitudeField;
            }
            set {
                if ((this.differenceAltitudeField.Equals(value) != true)) {
                    this.differenceAltitudeField = value;
                    this.RaisePropertyChanged("differenceAltitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> expectArrivalTime {
            get {
                return this.expectArrivalTimeField;
            }
            set {
                if ((this.expectArrivalTimeField.Equals(value) != true)) {
                    this.expectArrivalTimeField = value;
                    this.RaisePropertyChanged("expectArrivalTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> expectDepartureTime {
            get {
                return this.expectDepartureTimeField;
            }
            set {
                if ((this.expectDepartureTimeField.Equals(value) != true)) {
                    this.expectDepartureTimeField = value;
                    this.RaisePropertyChanged("expectDepartureTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> flightPlanId {
            get {
                return this.flightPlanIdField;
            }
            set {
                if ((this.flightPlanIdField.Equals(value) != true)) {
                    this.flightPlanIdField = value;
                    this.RaisePropertyChanged("flightPlanId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string flightPlanName {
            get {
                return this.flightPlanNameField;
            }
            set {
                if ((object.ReferenceEquals(this.flightPlanNameField, value) != true)) {
                    this.flightPlanNameField = value;
                    this.RaisePropertyChanged("flightPlanName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string flightPlanType {
            get {
                return this.flightPlanTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.flightPlanTypeField, value) != true)) {
                    this.flightPlanTypeField = value;
                    this.RaisePropertyChanged("flightPlanType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string flightPlanTypeCode {
            get {
                return this.flightPlanTypeCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.flightPlanTypeCodeField, value) != true)) {
                    this.flightPlanTypeCodeField = value;
                    this.RaisePropertyChanged("flightPlanTypeCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string flightRules {
            get {
                return this.flightRulesField;
            }
            set {
                if ((object.ReferenceEquals(this.flightRulesField, value) != true)) {
                    this.flightRulesField = value;
                    this.RaisePropertyChanged("flightRules");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string freeText {
            get {
                return this.freeTextField;
            }
            set {
                if ((object.ReferenceEquals(this.freeTextField, value) != true)) {
                    this.freeTextField = value;
                    this.RaisePropertyChanged("freeText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> gatePositionId {
            get {
                return this.gatePositionIdField;
            }
            set {
                if ((this.gatePositionIdField.Equals(value) != true)) {
                    this.gatePositionIdField = value;
                    this.RaisePropertyChanged("gatePositionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string initialCommandFly {
            get {
                return this.initialCommandFlyField;
            }
            set {
                if ((object.ReferenceEquals(this.initialCommandFlyField, value) != true)) {
                    this.initialCommandFlyField = value;
                    this.RaisePropertyChanged("initialCommandFly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string initialCommandTax {
            get {
                return this.initialCommandTaxField;
            }
            set {
                if ((object.ReferenceEquals(this.initialCommandTaxField, value) != true)) {
                    this.initialCommandTaxField = value;
                    this.RaisePropertyChanged("initialCommandTax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isTempAuthority {
            get {
                return this.isTempAuthorityField;
            }
            set {
                if ((this.isTempAuthorityField.Equals(value) != true)) {
                    this.isTempAuthorityField = value;
                    this.RaisePropertyChanged("isTempAuthority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isTempSector {
            get {
                return this.isTempSectorField;
            }
            set {
                if ((this.isTempSectorField.Equals(value) != true)) {
                    this.isTempSectorField = value;
                    this.RaisePropertyChanged("isTempSector");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string messageStatus {
            get {
                return this.messageStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.messageStatusField, value) != true)) {
                    this.messageStatusField = value;
                    this.RaisePropertyChanged("messageStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string operationAuthorityId {
            get {
                return this.operationAuthorityIdField;
            }
            set {
                if ((object.ReferenceEquals(this.operationAuthorityIdField, value) != true)) {
                    this.operationAuthorityIdField = value;
                    this.RaisePropertyChanged("operationAuthorityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string operationName {
            get {
                return this.operationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.operationNameField, value) != true)) {
                    this.operationNameField = value;
                    this.RaisePropertyChanged("operationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double pitch {
            get {
                return this.pitchField;
            }
            set {
                if ((this.pitchField.Equals(value) != true)) {
                    this.pitchField = value;
                    this.RaisePropertyChanged("pitch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> referencePressureValue {
            get {
                return this.referencePressureValueField;
            }
            set {
                if ((this.referencePressureValueField.Equals(value) != true)) {
                    this.referencePressureValueField = value;
                    this.RaisePropertyChanged("referencePressureValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string registerNo {
            get {
                return this.registerNoField;
            }
            set {
                if ((object.ReferenceEquals(this.registerNoField, value) != true)) {
                    this.registerNoField = value;
                    this.RaisePropertyChanged("registerNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double roll {
            get {
                return this.rollField;
            }
            set {
                if ((this.rollField.Equals(value) != true)) {
                    this.rollField = value;
                    this.RaisePropertyChanged("roll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string runwayName {
            get {
                return this.runwayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.runwayNameField, value) != true)) {
                    this.runwayNameField = value;
                    this.RaisePropertyChanged("runwayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> sectorRadarId {
            get {
                return this.sectorRadarIdField;
            }
            set {
                if ((this.sectorRadarIdField.Equals(value) != true)) {
                    this.sectorRadarIdField = value;
                    this.RaisePropertyChanged("sectorRadarId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sectorRadarName {
            get {
                return this.sectorRadarNameField;
            }
            set {
                if ((object.ReferenceEquals(this.sectorRadarNameField, value) != true)) {
                    this.sectorRadarNameField = value;
                    this.RaisePropertyChanged("sectorRadarName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double speed {
            get {
                return this.speedField;
            }
            set {
                if ((this.speedField.Equals(value) != true)) {
                    this.speedField = value;
                    this.RaisePropertyChanged("speed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ssrNo {
            get {
                return this.ssrNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ssrNoField, value) != true)) {
                    this.ssrNoField = value;
                    this.RaisePropertyChanged("ssrNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int visSeconds {
            get {
                return this.visSecondsField;
            }
            set {
                if ((this.visSecondsField.Equals(value) != true)) {
                    this.visSecondsField = value;
                    this.RaisePropertyChanged("visSeconds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> visTime {
            get {
                return this.visTimeField;
            }
            set {
                if ((this.visTimeField.Equals(value) != true)) {
                    this.visTimeField = value;
                    this.RaisePropertyChanged("visTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool visable {
            get {
                return this.visableField;
            }
            set {
                if ((this.visableField.Equals(value) != true)) {
                    this.visableField = value;
                    this.RaisePropertyChanged("visable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string wakeFlowType {
            get {
                return this.wakeFlowTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.wakeFlowTypeField, value) != true)) {
                    this.wakeFlowTypeField = value;
                    this.RaisePropertyChanged("wakeFlowType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double x {
            get {
                return this.xField;
            }
            set {
                if ((this.xField.Equals(value) != true)) {
                    this.xField = value;
                    this.RaisePropertyChanged("x");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double y {
            get {
                return this.yField;
            }
            set {
                if ((this.yField.Equals(value) != true)) {
                    this.yField = value;
                    this.RaisePropertyChanged("y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DescriptionResolving", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class DescriptionResolving : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CellTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ColumnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ColumnWidthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Color FiledColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Font FiledFontField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FiledNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float FiledOpacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsExclusiveLineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsGlintField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPermissionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsVisibleFiledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsYetClintField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Color TemporaryColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Font TemporaryFontField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Color TextColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Font TextFontField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float TextOpacityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CellType {
            get {
                return this.CellTypeField;
            }
            set {
                if ((this.CellTypeField.Equals(value) != true)) {
                    this.CellTypeField = value;
                    this.RaisePropertyChanged("CellType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Column {
            get {
                return this.ColumnField;
            }
            set {
                if ((this.ColumnField.Equals(value) != true)) {
                    this.ColumnField = value;
                    this.RaisePropertyChanged("Column");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float ColumnWidth {
            get {
                return this.ColumnWidthField;
            }
            set {
                if ((this.ColumnWidthField.Equals(value) != true)) {
                    this.ColumnWidthField = value;
                    this.RaisePropertyChanged("ColumnWidth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Color FiledColor {
            get {
                return this.FiledColorField;
            }
            set {
                if ((this.FiledColorField.Equals(value) != true)) {
                    this.FiledColorField = value;
                    this.RaisePropertyChanged("FiledColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Font FiledFont {
            get {
                return this.FiledFontField;
            }
            set {
                if ((object.ReferenceEquals(this.FiledFontField, value) != true)) {
                    this.FiledFontField = value;
                    this.RaisePropertyChanged("FiledFont");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FiledName {
            get {
                return this.FiledNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FiledNameField, value) != true)) {
                    this.FiledNameField = value;
                    this.RaisePropertyChanged("FiledName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float FiledOpacity {
            get {
                return this.FiledOpacityField;
            }
            set {
                if ((this.FiledOpacityField.Equals(value) != true)) {
                    this.FiledOpacityField = value;
                    this.RaisePropertyChanged("FiledOpacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsExclusiveLine {
            get {
                return this.IsExclusiveLineField;
            }
            set {
                if ((this.IsExclusiveLineField.Equals(value) != true)) {
                    this.IsExclusiveLineField = value;
                    this.RaisePropertyChanged("IsExclusiveLine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsGlint {
            get {
                return this.IsGlintField;
            }
            set {
                if ((this.IsGlintField.Equals(value) != true)) {
                    this.IsGlintField = value;
                    this.RaisePropertyChanged("IsGlint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPermission {
            get {
                return this.IsPermissionField;
            }
            set {
                if ((this.IsPermissionField.Equals(value) != true)) {
                    this.IsPermissionField = value;
                    this.RaisePropertyChanged("IsPermission");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsVisibleFiled {
            get {
                return this.IsVisibleFiledField;
            }
            set {
                if ((this.IsVisibleFiledField.Equals(value) != true)) {
                    this.IsVisibleFiledField = value;
                    this.RaisePropertyChanged("IsVisibleFiled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsYetClint {
            get {
                return this.IsYetClintField;
            }
            set {
                if ((this.IsYetClintField.Equals(value) != true)) {
                    this.IsYetClintField = value;
                    this.RaisePropertyChanged("IsYetClint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Row {
            get {
                return this.RowField;
            }
            set {
                if ((this.RowField.Equals(value) != true)) {
                    this.RowField = value;
                    this.RaisePropertyChanged("Row");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Color TemporaryColor {
            get {
                return this.TemporaryColorField;
            }
            set {
                if ((this.TemporaryColorField.Equals(value) != true)) {
                    this.TemporaryColorField = value;
                    this.RaisePropertyChanged("TemporaryColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Font TemporaryFont {
            get {
                return this.TemporaryFontField;
            }
            set {
                if ((object.ReferenceEquals(this.TemporaryFontField, value) != true)) {
                    this.TemporaryFontField = value;
                    this.RaisePropertyChanged("TemporaryFont");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Color TextColor {
            get {
                return this.TextColorField;
            }
            set {
                if ((this.TextColorField.Equals(value) != true)) {
                    this.TextColorField = value;
                    this.RaisePropertyChanged("TextColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Font TextFont {
            get {
                return this.TextFontField;
            }
            set {
                if ((object.ReferenceEquals(this.TextFontField, value) != true)) {
                    this.TextFontField = value;
                    this.RaisePropertyChanged("TextFont");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float TextOpacity {
            get {
                return this.TextOpacityField;
            }
            set {
                if ((this.TextOpacityField.Equals(value) != true)) {
                    this.TextOpacityField = value;
                    this.RaisePropertyChanged("TextOpacity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrainningGroupState", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    public enum TrainningGroupState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnStart = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Started = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pause = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stop = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnKnow = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlanType", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    public enum PlanType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AIRSPACE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ENVIRONMENTAL = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FLIGHT = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OBJECT = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SCRIPT = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VEHICLE = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CONDITIONCOMMAND = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthorityGroup", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class AuthorityGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string[]> AirLinesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AirPortIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AllGroupCheckedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorityIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> FlightPlanTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string[]> ParkingField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string[]> AirLines {
            get {
                return this.AirLinesField;
            }
            set {
                if ((object.ReferenceEquals(this.AirLinesField, value) != true)) {
                    this.AirLinesField = value;
                    this.RaisePropertyChanged("AirLines");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AirPortId {
            get {
                return this.AirPortIdField;
            }
            set {
                if ((object.ReferenceEquals(this.AirPortIdField, value) != true)) {
                    this.AirPortIdField = value;
                    this.RaisePropertyChanged("AirPortId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AllGroupChecked {
            get {
                return this.AllGroupCheckedField;
            }
            set {
                if ((object.ReferenceEquals(this.AllGroupCheckedField, value) != true)) {
                    this.AllGroupCheckedField = value;
                    this.RaisePropertyChanged("AllGroupChecked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorityID {
            get {
                return this.AuthorityIDField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorityIDField, value) != true)) {
                    this.AuthorityIDField = value;
                    this.RaisePropertyChanged("AuthorityID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorityName {
            get {
                return this.AuthorityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorityNameField, value) != true)) {
                    this.AuthorityNameField = value;
                    this.RaisePropertyChanged("AuthorityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> FlightPlanType {
            get {
                return this.FlightPlanTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightPlanTypeField, value) != true)) {
                    this.FlightPlanTypeField = value;
                    this.RaisePropertyChanged("FlightPlanType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string[]> Parking {
            get {
                return this.ParkingField;
            }
            set {
                if ((object.ReferenceEquals(this.ParkingField, value) != true)) {
                    this.ParkingField = value;
                    this.RaisePropertyChanged("Parking");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthorityType", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    public enum AuthorityType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FLIGHTPLANTYPE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AIRLINES = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PARKING = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SignAttribute", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class SignAttribute : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string flightPlanNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string signAttributeCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string signAttributeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string signAttributeInnerColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string signAttributeOuterColorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string flightPlanName {
            get {
                return this.flightPlanNameField;
            }
            set {
                if ((object.ReferenceEquals(this.flightPlanNameField, value) != true)) {
                    this.flightPlanNameField = value;
                    this.RaisePropertyChanged("flightPlanName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string signAttributeCode {
            get {
                return this.signAttributeCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.signAttributeCodeField, value) != true)) {
                    this.signAttributeCodeField = value;
                    this.RaisePropertyChanged("signAttributeCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string signAttributeId {
            get {
                return this.signAttributeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.signAttributeIdField, value) != true)) {
                    this.signAttributeIdField = value;
                    this.RaisePropertyChanged("signAttributeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string signAttributeInnerColor {
            get {
                return this.signAttributeInnerColorField;
            }
            set {
                if ((object.ReferenceEquals(this.signAttributeInnerColorField, value) != true)) {
                    this.signAttributeInnerColorField = value;
                    this.RaisePropertyChanged("signAttributeInnerColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string signAttributeOuterColor {
            get {
                return this.signAttributeOuterColorField;
            }
            set {
                if ((object.ReferenceEquals(this.signAttributeOuterColorField, value) != true)) {
                    this.signAttributeOuterColorField = value;
                    this.RaisePropertyChanged("signAttributeOuterColor");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Sign", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Sign : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string airportIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lightPlanTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string signAttributeIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string signColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string signIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string signTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userRoleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string airportId {
            get {
                return this.airportIdField;
            }
            set {
                if ((object.ReferenceEquals(this.airportIdField, value) != true)) {
                    this.airportIdField = value;
                    this.RaisePropertyChanged("airportId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lightPlanTypeId {
            get {
                return this.lightPlanTypeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.lightPlanTypeIdField, value) != true)) {
                    this.lightPlanTypeIdField = value;
                    this.RaisePropertyChanged("lightPlanTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string signAttributeIds {
            get {
                return this.signAttributeIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.signAttributeIdsField, value) != true)) {
                    this.signAttributeIdsField = value;
                    this.RaisePropertyChanged("signAttributeIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string signColor {
            get {
                return this.signColorField;
            }
            set {
                if ((object.ReferenceEquals(this.signColorField, value) != true)) {
                    this.signColorField = value;
                    this.RaisePropertyChanged("signColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string signId {
            get {
                return this.signIdField;
            }
            set {
                if ((object.ReferenceEquals(this.signIdField, value) != true)) {
                    this.signIdField = value;
                    this.RaisePropertyChanged("signId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string signType {
            get {
                return this.signTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.signTypeField, value) != true)) {
                    this.signTypeField = value;
                    this.RaisePropertyChanged("signType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userRole {
            get {
                return this.userRoleField;
            }
            set {
                if ((object.ReferenceEquals(this.userRoleField, value) != true)) {
                    this.userRoleField = value;
                    this.RaisePropertyChanged("userRole");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientSign", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class ClientSign : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, DeviceMonitor.ServiceReference1.Sign> SignsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isUseCustomizeSetField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, DeviceMonitor.ServiceReference1.Sign> Signs {
            get {
                return this.SignsField;
            }
            set {
                if ((object.ReferenceEquals(this.SignsField, value) != true)) {
                    this.SignsField = value;
                    this.RaisePropertyChanged("Signs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isUseCustomizeSet {
            get {
                return this.isUseCustomizeSetField;
            }
            set {
                if ((this.isUseCustomizeSetField.Equals(value) != true)) {
                    this.isUseCustomizeSetField = value;
                    this.RaisePropertyChanged("isUseCustomizeSet");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoleUserRelation", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class RoleUserRelation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string roleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string trainGroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string role {
            get {
                return this.roleField;
            }
            set {
                if ((object.ReferenceEquals(this.roleField, value) != true)) {
                    this.roleField = value;
                    this.RaisePropertyChanged("role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string trainGroupId {
            get {
                return this.trainGroupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.trainGroupIdField, value) != true)) {
                    this.trainGroupIdField = value;
                    this.RaisePropertyChanged("trainGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string user {
            get {
                return this.userField;
            }
            set {
                if ((object.ReferenceEquals(this.userField, value) != true)) {
                    this.userField = value;
                    this.RaisePropertyChanged("user");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrainPlan", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class TrainPlan : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartedTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnionGroupIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string airPortIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isUnionGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string trainPlanGroupIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string trainPlanGroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string trainPlanIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string trainPlanNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceMonitor.ServiceReference1.TrainningGroupState trainingGroupStateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartedTime {
            get {
                return this.StartedTimeField;
            }
            set {
                if ((this.StartedTimeField.Equals(value) != true)) {
                    this.StartedTimeField = value;
                    this.RaisePropertyChanged("StartedTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UnionGroupID {
            get {
                return this.UnionGroupIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UnionGroupIDField, value) != true)) {
                    this.UnionGroupIDField = value;
                    this.RaisePropertyChanged("UnionGroupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string airPortId {
            get {
                return this.airPortIdField;
            }
            set {
                if ((object.ReferenceEquals(this.airPortIdField, value) != true)) {
                    this.airPortIdField = value;
                    this.RaisePropertyChanged("airPortId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isUnionGroup {
            get {
                return this.isUnionGroupField;
            }
            set {
                if ((this.isUnionGroupField.Equals(value) != true)) {
                    this.isUnionGroupField = value;
                    this.RaisePropertyChanged("isUnionGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string trainPlanGroupID {
            get {
                return this.trainPlanGroupIDField;
            }
            set {
                if ((object.ReferenceEquals(this.trainPlanGroupIDField, value) != true)) {
                    this.trainPlanGroupIDField = value;
                    this.RaisePropertyChanged("trainPlanGroupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string trainPlanGroupName {
            get {
                return this.trainPlanGroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.trainPlanGroupNameField, value) != true)) {
                    this.trainPlanGroupNameField = value;
                    this.RaisePropertyChanged("trainPlanGroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string trainPlanID {
            get {
                return this.trainPlanIDField;
            }
            set {
                if ((object.ReferenceEquals(this.trainPlanIDField, value) != true)) {
                    this.trainPlanIDField = value;
                    this.RaisePropertyChanged("trainPlanID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string trainPlanName {
            get {
                return this.trainPlanNameField;
            }
            set {
                if ((object.ReferenceEquals(this.trainPlanNameField, value) != true)) {
                    this.trainPlanNameField = value;
                    this.RaisePropertyChanged("trainPlanName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceMonitor.ServiceReference1.TrainningGroupState trainingGroupState {
            get {
                return this.trainingGroupStateField;
            }
            set {
                if ((this.trainingGroupStateField.Equals(value) != true)) {
                    this.trainingGroupStateField = value;
                    this.RaisePropertyChanged("trainingGroupState");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FPoint", Namespace="http://schemas.datacontract.org/2004/07/IACtxPlusCLI")]
    [System.SerializableAttribute()]
    public partial class FPoint : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTargetPointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TurnRadiusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double xField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double yField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTargetPoint {
            get {
                return this.IsTargetPointField;
            }
            set {
                if ((this.IsTargetPointField.Equals(value) != true)) {
                    this.IsTargetPointField = value;
                    this.RaisePropertyChanged("IsTargetPoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TurnRadius {
            get {
                return this.TurnRadiusField;
            }
            set {
                if ((this.TurnRadiusField.Equals(value) != true)) {
                    this.TurnRadiusField = value;
                    this.RaisePropertyChanged("TurnRadius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double x {
            get {
                return this.xField;
            }
            set {
                if ((this.xField.Equals(value) != true)) {
                    this.xField = value;
                    this.RaisePropertyChanged("x");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double y {
            get {
                return this.yField;
            }
            set {
                if ((this.yField.Equals(value) != true)) {
                    this.yField = value;
                    this.RaisePropertyChanged("y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FlightCallback", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class FlightCallback : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long beforeTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string flightNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceMonitor.ServiceReference1.msgType messggeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string msgField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long beforeTime {
            get {
                return this.beforeTimeField;
            }
            set {
                if ((this.beforeTimeField.Equals(value) != true)) {
                    this.beforeTimeField = value;
                    this.RaisePropertyChanged("beforeTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string flightNo {
            get {
                return this.flightNoField;
            }
            set {
                if ((object.ReferenceEquals(this.flightNoField, value) != true)) {
                    this.flightNoField = value;
                    this.RaisePropertyChanged("flightNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceMonitor.ServiceReference1.msgType messggeType {
            get {
                return this.messggeTypeField;
            }
            set {
                if ((this.messggeTypeField.Equals(value) != true)) {
                    this.messggeTypeField = value;
                    this.RaisePropertyChanged("messggeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string msg {
            get {
                return this.msgField;
            }
            set {
                if ((object.ReferenceEquals(this.msgField, value) != true)) {
                    this.msgField = value;
                    this.RaisePropertyChanged("msg");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="msgType", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    public enum msgType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REPORT_MESSAGE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CONFIRM_MESSAGE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CONDITION_MESSAGE = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BAR_MESSAGE = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AppendCommand", ReplyAction="http://tempuri.org/IService1/AppendCommandResponse")]
        void AppendCommand(string Commandstr, string FlightId, string trainGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AppendCommand", ReplyAction="http://tempuri.org/IService1/AppendCommandResponse")]
        System.Threading.Tasks.Task AppendCommandAsync(string Commandstr, string FlightId, string trainGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExecuteCommand", ReplyAction="http://tempuri.org/IService1/ExecuteCommandResponse")]
        string ExecuteCommand(string Commandstr, string FlightId, string trainGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExecuteCommand", ReplyAction="http://tempuri.org/IService1/ExecuteCommandResponse")]
        System.Threading.Tasks.Task<string> ExecuteCommandAsync(string Commandstr, string FlightId, string trainGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertCommand", ReplyAction="http://tempuri.org/IService1/InsertCommandResponse")]
        void InsertCommand(string Commandstr, string FlightId, string trainGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertCommand", ReplyAction="http://tempuri.org/IService1/InsertCommandResponse")]
        System.Threading.Tasks.Task InsertCommandAsync(string Commandstr, string FlightId, string trainGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getFlightAttribute", ReplyAction="http://tempuri.org/IService1/getFlightAttributeResponse")]
        System.Collections.Generic.Dictionary<string, DeviceMonitor.ServiceReference1.FlightPlan> getFlightAttribute(string trainGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getFlightAttribute", ReplyAction="http://tempuri.org/IService1/getFlightAttributeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, DeviceMonitor.ServiceReference1.FlightPlan>> getFlightAttributeAsync(string trainGroupId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/heartBeat")]
        void heartBeat(string user, string role);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/heartBeat")]
        System.Threading.Tasks.Task heartBeatAsync(string user, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/login", ReplyAction="http://tempuri.org/IService1/loginResponse")]
        bool login(string accout, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/login", ReplyAction="http://tempuri.org/IService1/loginResponse")]
        System.Threading.Tasks.Task<bool> loginAsync(string accout, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/register", ReplyAction="http://tempuri.org/IService1/registerResponse")]
        bool register(string accout, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/register", ReplyAction="http://tempuri.org/IService1/registerResponse")]
        System.Threading.Tasks.Task<bool> registerAsync(string accout, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addUserToOnlineList", ReplyAction="http://tempuri.org/IService1/addUserToOnlineListResponse")]
        bool addUserToOnlineList(string user, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addUserToOnlineList", ReplyAction="http://tempuri.org/IService1/addUserToOnlineListResponse")]
        System.Threading.Tasks.Task<bool> addUserToOnlineListAsync(string user, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUserRoleList", ReplyAction="http://tempuri.org/IService1/getUserRoleListResponse")]
        System.Collections.Generic.Dictionary<string, string[]> getUserRoleList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUserRoleList", ReplyAction="http://tempuri.org/IService1/getUserRoleListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string[]>> getUserRoleListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getTrainningState", ReplyAction="http://tempuri.org/IService1/getTrainningStateResponse")]
        DeviceMonitor.ServiceReference1.TrainningGroupState getTrainningState(string trainGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getTrainningState", ReplyAction="http://tempuri.org/IService1/getTrainningStateResponse")]
        System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.TrainningGroupState> getTrainningStateAsync(string trainGroupId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/createTrainningGroup")]
        void createTrainningGroup(System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<DeviceMonitor.ServiceReference1.PlanType, string>> trainningGroup);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/createTrainningGroup")]
        System.Threading.Tasks.Task createTrainningGroupAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<DeviceMonitor.ServiceReference1.PlanType, string>> trainningGroup);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/editTrainningGroup")]
        void editTrainningGroup(System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<DeviceMonitor.ServiceReference1.PlanType, string>> trainningGroup);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/editTrainningGroup")]
        System.Threading.Tasks.Task editTrainningGroupAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<DeviceMonitor.ServiceReference1.PlanType, string>> trainningGroup);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/addUserToTrainningGroup")]
        void addUserToTrainningGroup(string TrainingGroupID, string role, string user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/addUserToTrainningGroup")]
        System.Threading.Tasks.Task addUserToTrainningGroupAsync(string TrainingGroupID, string role, string user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/removeUserToTrainningGroup")]
        void removeUserToTrainningGroup(string role, string user, string trainGroupId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/removeUserToTrainningGroup")]
        System.Threading.Tasks.Task removeUserToTrainningGroupAsync(string role, string user, string trainGroupId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/startTrainning")]
        void startTrainning(string TrainingGroupID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/startTrainning")]
        System.Threading.Tasks.Task startTrainningAsync(string TrainingGroupID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/reStartTrainning")]
        void reStartTrainning(string TrainingGroupID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/reStartTrainning")]
        System.Threading.Tasks.Task reStartTrainningAsync(string TrainingGroupID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/stopTrainning")]
        void stopTrainning(string TrainingGroupID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/stopTrainning")]
        System.Threading.Tasks.Task stopTrainningAsync(string TrainingGroupID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/pauseTrainning")]
        void pauseTrainning(string TrainingGroupID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/pauseTrainning")]
        System.Threading.Tasks.Task pauseTrainningAsync(string TrainingGroupID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/continueTrainning")]
        void continueTrainning(string TrainingGroupID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/continueTrainning")]
        System.Threading.Tasks.Task continueTrainningAsync(string TrainingGroupID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/setUserAuthority")]
        void setUserAuthority(System.Collections.Generic.Dictionary<string, DeviceMonitor.ServiceReference1.AuthorityGroup> AuthorityTypeGroup, string role, string User);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/setUserAuthority")]
        System.Threading.Tasks.Task setUserAuthorityAsync(System.Collections.Generic.Dictionary<string, DeviceMonitor.ServiceReference1.AuthorityGroup> AuthorityTypeGroup, string role, string User);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/loadAllAuthorityData")]
        void loadAllAuthorityData();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/loadAllAuthorityData")]
        System.Threading.Tasks.Task loadAllAuthorityDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllAuthorityData", ReplyAction="http://tempuri.org/IService1/getAllAuthorityDataResponse")]
        System.Collections.Generic.Dictionary<string, DeviceMonitor.ServiceReference1.AuthorityGroup> getAllAuthorityData(string TrainingGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllAuthorityData", ReplyAction="http://tempuri.org/IService1/getAllAuthorityDataResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, DeviceMonitor.ServiceReference1.AuthorityGroup>> getAllAuthorityDataAsync(string TrainingGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/data", ReplyAction="http://tempuri.org/IService1/dataResponse")]
        DeviceMonitor.ServiceReference1.AuthorityType data();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/data", ReplyAction="http://tempuri.org/IService1/dataResponse")]
        System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.AuthorityType> dataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getLastDate", ReplyAction="http://tempuri.org/IService1/getLastDateResponse")]
        System.DateTime getLastDate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getLastDate", ReplyAction="http://tempuri.org/IService1/getLastDateResponse")]
        System.Threading.Tasks.Task<System.DateTime> getLastDateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUserAuthority", ReplyAction="http://tempuri.org/IService1/getUserAuthorityResponse")]
        System.Collections.Generic.Dictionary<string, DeviceMonitor.ServiceReference1.AuthorityGroup> getUserAuthority(string role, string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUserAuthority", ReplyAction="http://tempuri.org/IService1/getUserAuthorityResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, DeviceMonitor.ServiceReference1.AuthorityGroup>> getUserAuthorityAsync(string role, string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isOnLine", ReplyAction="http://tempuri.org/IService1/isOnLineResponse")]
        bool isOnLine(string role, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isOnLine", ReplyAction="http://tempuri.org/IService1/isOnLineResponse")]
        System.Threading.Tasks.Task<bool> isOnLineAsync(string role, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSignAttribute", ReplyAction="http://tempuri.org/IService1/GetSignAttributeResponse")]
        DeviceMonitor.ServiceReference1.SignAttribute[] GetSignAttribute();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSignAttribute", ReplyAction="http://tempuri.org/IService1/GetSignAttributeResponse")]
        System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.SignAttribute[]> GetSignAttributeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSigns", ReplyAction="http://tempuri.org/IService1/GetSignsResponse")]
        DeviceMonitor.ServiceReference1.Sign[] GetSigns();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSigns", ReplyAction="http://tempuri.org/IService1/GetSignsResponse")]
        System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.Sign[]> GetSignsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getClientSign", ReplyAction="http://tempuri.org/IService1/getClientSignResponse")]
        DeviceMonitor.ServiceReference1.ClientSign getClientSign();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getClientSign", ReplyAction="http://tempuri.org/IService1/getClientSignResponse")]
        System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.ClientSign> getClientSignAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/setClientSign")]
        void setClientSign(DeviceMonitor.ServiceReference1.Sign sign);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/setClientSign")]
        System.Threading.Tasks.Task setClientSignAsync(DeviceMonitor.ServiceReference1.Sign sign);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/setSignIsCustom")]
        void setSignIsCustom(bool isCustom);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/setSignIsCustom")]
        System.Threading.Tasks.Task setSignIsCustomAsync(bool isCustom);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/changeFlightPlanProperty")]
        void changeFlightPlanProperty(string PropertyName, string value, string flightNo, string trainGroupID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/changeFlightPlanProperty")]
        System.Threading.Tasks.Task changeFlightPlanPropertyAsync(string PropertyName, string value, string flightNo, string trainGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllGroupUser", ReplyAction="http://tempuri.org/IService1/getAllGroupUserResponse")]
        DeviceMonitor.ServiceReference1.RoleUserRelation[] getAllGroupUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllGroupUser", ReplyAction="http://tempuri.org/IService1/getAllGroupUserResponse")]
        System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.RoleUserRelation[]> getAllGroupUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllTrainingGroup", ReplyAction="http://tempuri.org/IService1/getAllTrainingGroupResponse")]
        DeviceMonitor.ServiceReference1.TrainPlan[] getAllTrainingGroup();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllTrainingGroup", ReplyAction="http://tempuri.org/IService1/getAllTrainingGroupResponse")]
        System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.TrainPlan[]> getAllTrainingGroupAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getPredictionLineByDistance", ReplyAction="http://tempuri.org/IService1/getPredictionLineByDistanceResponse")]
        DeviceMonitor.ServiceReference1.FPoint[] getPredictionLineByDistance(string trainGroupId, string flightId, [System.ServiceModel.MessageParameterAttribute(Name="getPredictionLineByDistance")] double getPredictionLineByDistance1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getPredictionLineByDistance", ReplyAction="http://tempuri.org/IService1/getPredictionLineByDistanceResponse")]
        System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.FPoint[]> getPredictionLineByDistanceAsync(string trainGroupId, string flightId, double getPredictionLineByDistance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getPredictionLineByTime", ReplyAction="http://tempuri.org/IService1/getPredictionLineByTimeResponse")]
        DeviceMonitor.ServiceReference1.FPoint[] getPredictionLineByTime(string trainGroupId, string flightId, [System.ServiceModel.MessageParameterAttribute(Name="getPredictionLineByTime")] long getPredictionLineByTime1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getPredictionLineByTime", ReplyAction="http://tempuri.org/IService1/getPredictionLineByTimeResponse")]
        System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.FPoint[]> getPredictionLineByTimeAsync(string trainGroupId, string flightId, long getPredictionLineByTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAirPortId", ReplyAction="http://tempuri.org/IService1/getAirPortIdResponse")]
        string getAirPortId(string trainGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAirPortId", ReplyAction="http://tempuri.org/IService1/getAirPortIdResponse")]
        System.Threading.Tasks.Task<string> getAirPortIdAsync(string trainGroupId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/onlineExceptionClear")]
        void onlineExceptionClear(string roleName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/onlineExceptionClear")]
        System.Threading.Tasks.Task onlineExceptionClearAsync(string roleName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/setIsUserExecConfirm")]
        void setIsUserExecConfirm(string id, bool isConfirm, string trainGroupId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/setIsUserExecConfirm")]
        System.Threading.Tasks.Task setIsUserExecConfirmAsync(string id, bool isConfirm, string trainGroupId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/createTrainningGroupByTrainingId")]
        void createTrainningGroupByTrainingId(DeviceMonitor.ServiceReference1.TrainPlan trainPlan);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/createTrainningGroupByTrainingId")]
        System.Threading.Tasks.Task createTrainningGroupByTrainingIdAsync(DeviceMonitor.ServiceReference1.TrainPlan trainPlan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getCallBackMessage", ReplyAction="http://tempuri.org/IService1/getCallBackMessageResponse")]
        DeviceMonitor.ServiceReference1.FlightCallback[] getCallBackMessage();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getCallBackMessage", ReplyAction="http://tempuri.org/IService1/getCallBackMessageResponse")]
        System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.FlightCallback[]> getCallBackMessageAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : DeviceMonitor.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<DeviceMonitor.ServiceReference1.IService1>, DeviceMonitor.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AppendCommand(string Commandstr, string FlightId, string trainGroupId) {
            base.Channel.AppendCommand(Commandstr, FlightId, trainGroupId);
        }
        
        public System.Threading.Tasks.Task AppendCommandAsync(string Commandstr, string FlightId, string trainGroupId) {
            return base.Channel.AppendCommandAsync(Commandstr, FlightId, trainGroupId);
        }
        
        public string ExecuteCommand(string Commandstr, string FlightId, string trainGroupId) {
            return base.Channel.ExecuteCommand(Commandstr, FlightId, trainGroupId);
        }
        
        public System.Threading.Tasks.Task<string> ExecuteCommandAsync(string Commandstr, string FlightId, string trainGroupId) {
            return base.Channel.ExecuteCommandAsync(Commandstr, FlightId, trainGroupId);
        }
        
        public void InsertCommand(string Commandstr, string FlightId, string trainGroupId) {
            base.Channel.InsertCommand(Commandstr, FlightId, trainGroupId);
        }
        
        public System.Threading.Tasks.Task InsertCommandAsync(string Commandstr, string FlightId, string trainGroupId) {
            return base.Channel.InsertCommandAsync(Commandstr, FlightId, trainGroupId);
        }
        
        public System.Collections.Generic.Dictionary<string, DeviceMonitor.ServiceReference1.FlightPlan> getFlightAttribute(string trainGroupId) {
            return base.Channel.getFlightAttribute(trainGroupId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, DeviceMonitor.ServiceReference1.FlightPlan>> getFlightAttributeAsync(string trainGroupId) {
            return base.Channel.getFlightAttributeAsync(trainGroupId);
        }
        
        public void heartBeat(string user, string role) {
            base.Channel.heartBeat(user, role);
        }
        
        public System.Threading.Tasks.Task heartBeatAsync(string user, string role) {
            return base.Channel.heartBeatAsync(user, role);
        }
        
        public bool login(string accout, string pwd) {
            return base.Channel.login(accout, pwd);
        }
        
        public System.Threading.Tasks.Task<bool> loginAsync(string accout, string pwd) {
            return base.Channel.loginAsync(accout, pwd);
        }
        
        public bool register(string accout, string pwd) {
            return base.Channel.register(accout, pwd);
        }
        
        public System.Threading.Tasks.Task<bool> registerAsync(string accout, string pwd) {
            return base.Channel.registerAsync(accout, pwd);
        }
        
        public bool addUserToOnlineList(string user, string role) {
            return base.Channel.addUserToOnlineList(user, role);
        }
        
        public System.Threading.Tasks.Task<bool> addUserToOnlineListAsync(string user, string role) {
            return base.Channel.addUserToOnlineListAsync(user, role);
        }
        
        public System.Collections.Generic.Dictionary<string, string[]> getUserRoleList() {
            return base.Channel.getUserRoleList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string[]>> getUserRoleListAsync() {
            return base.Channel.getUserRoleListAsync();
        }
        
        public DeviceMonitor.ServiceReference1.TrainningGroupState getTrainningState(string trainGroupId) {
            return base.Channel.getTrainningState(trainGroupId);
        }
        
        public System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.TrainningGroupState> getTrainningStateAsync(string trainGroupId) {
            return base.Channel.getTrainningStateAsync(trainGroupId);
        }
        
        public void createTrainningGroup(System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<DeviceMonitor.ServiceReference1.PlanType, string>> trainningGroup) {
            base.Channel.createTrainningGroup(trainningGroup);
        }
        
        public System.Threading.Tasks.Task createTrainningGroupAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<DeviceMonitor.ServiceReference1.PlanType, string>> trainningGroup) {
            return base.Channel.createTrainningGroupAsync(trainningGroup);
        }
        
        public void editTrainningGroup(System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<DeviceMonitor.ServiceReference1.PlanType, string>> trainningGroup) {
            base.Channel.editTrainningGroup(trainningGroup);
        }
        
        public System.Threading.Tasks.Task editTrainningGroupAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<DeviceMonitor.ServiceReference1.PlanType, string>> trainningGroup) {
            return base.Channel.editTrainningGroupAsync(trainningGroup);
        }
        
        public void addUserToTrainningGroup(string TrainingGroupID, string role, string user) {
            base.Channel.addUserToTrainningGroup(TrainingGroupID, role, user);
        }
        
        public System.Threading.Tasks.Task addUserToTrainningGroupAsync(string TrainingGroupID, string role, string user) {
            return base.Channel.addUserToTrainningGroupAsync(TrainingGroupID, role, user);
        }
        
        public void removeUserToTrainningGroup(string role, string user, string trainGroupId) {
            base.Channel.removeUserToTrainningGroup(role, user, trainGroupId);
        }
        
        public System.Threading.Tasks.Task removeUserToTrainningGroupAsync(string role, string user, string trainGroupId) {
            return base.Channel.removeUserToTrainningGroupAsync(role, user, trainGroupId);
        }
        
        public void startTrainning(string TrainingGroupID) {
            base.Channel.startTrainning(TrainingGroupID);
        }
        
        public System.Threading.Tasks.Task startTrainningAsync(string TrainingGroupID) {
            return base.Channel.startTrainningAsync(TrainingGroupID);
        }
        
        public void reStartTrainning(string TrainingGroupID) {
            base.Channel.reStartTrainning(TrainingGroupID);
        }
        
        public System.Threading.Tasks.Task reStartTrainningAsync(string TrainingGroupID) {
            return base.Channel.reStartTrainningAsync(TrainingGroupID);
        }
        
        public void stopTrainning(string TrainingGroupID) {
            base.Channel.stopTrainning(TrainingGroupID);
        }
        
        public System.Threading.Tasks.Task stopTrainningAsync(string TrainingGroupID) {
            return base.Channel.stopTrainningAsync(TrainingGroupID);
        }
        
        public void pauseTrainning(string TrainingGroupID) {
            base.Channel.pauseTrainning(TrainingGroupID);
        }
        
        public System.Threading.Tasks.Task pauseTrainningAsync(string TrainingGroupID) {
            return base.Channel.pauseTrainningAsync(TrainingGroupID);
        }
        
        public void continueTrainning(string TrainingGroupID) {
            base.Channel.continueTrainning(TrainingGroupID);
        }
        
        public System.Threading.Tasks.Task continueTrainningAsync(string TrainingGroupID) {
            return base.Channel.continueTrainningAsync(TrainingGroupID);
        }
        
        public void setUserAuthority(System.Collections.Generic.Dictionary<string, DeviceMonitor.ServiceReference1.AuthorityGroup> AuthorityTypeGroup, string role, string User) {
            base.Channel.setUserAuthority(AuthorityTypeGroup, role, User);
        }
        
        public System.Threading.Tasks.Task setUserAuthorityAsync(System.Collections.Generic.Dictionary<string, DeviceMonitor.ServiceReference1.AuthorityGroup> AuthorityTypeGroup, string role, string User) {
            return base.Channel.setUserAuthorityAsync(AuthorityTypeGroup, role, User);
        }
        
        public void loadAllAuthorityData() {
            base.Channel.loadAllAuthorityData();
        }
        
        public System.Threading.Tasks.Task loadAllAuthorityDataAsync() {
            return base.Channel.loadAllAuthorityDataAsync();
        }
        
        public System.Collections.Generic.Dictionary<string, DeviceMonitor.ServiceReference1.AuthorityGroup> getAllAuthorityData(string TrainingGroupId) {
            return base.Channel.getAllAuthorityData(TrainingGroupId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, DeviceMonitor.ServiceReference1.AuthorityGroup>> getAllAuthorityDataAsync(string TrainingGroupId) {
            return base.Channel.getAllAuthorityDataAsync(TrainingGroupId);
        }
        
        public DeviceMonitor.ServiceReference1.AuthorityType data() {
            return base.Channel.data();
        }
        
        public System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.AuthorityType> dataAsync() {
            return base.Channel.dataAsync();
        }
        
        public System.DateTime getLastDate() {
            return base.Channel.getLastDate();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> getLastDateAsync() {
            return base.Channel.getLastDateAsync();
        }
        
        public System.Collections.Generic.Dictionary<string, DeviceMonitor.ServiceReference1.AuthorityGroup> getUserAuthority(string role, string User) {
            return base.Channel.getUserAuthority(role, User);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, DeviceMonitor.ServiceReference1.AuthorityGroup>> getUserAuthorityAsync(string role, string User) {
            return base.Channel.getUserAuthorityAsync(role, User);
        }
        
        public bool isOnLine(string role, string user) {
            return base.Channel.isOnLine(role, user);
        }
        
        public System.Threading.Tasks.Task<bool> isOnLineAsync(string role, string user) {
            return base.Channel.isOnLineAsync(role, user);
        }
        
        public DeviceMonitor.ServiceReference1.SignAttribute[] GetSignAttribute() {
            return base.Channel.GetSignAttribute();
        }
        
        public System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.SignAttribute[]> GetSignAttributeAsync() {
            return base.Channel.GetSignAttributeAsync();
        }
        
        public DeviceMonitor.ServiceReference1.Sign[] GetSigns() {
            return base.Channel.GetSigns();
        }
        
        public System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.Sign[]> GetSignsAsync() {
            return base.Channel.GetSignsAsync();
        }
        
        public DeviceMonitor.ServiceReference1.ClientSign getClientSign() {
            return base.Channel.getClientSign();
        }
        
        public System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.ClientSign> getClientSignAsync() {
            return base.Channel.getClientSignAsync();
        }
        
        public void setClientSign(DeviceMonitor.ServiceReference1.Sign sign) {
            base.Channel.setClientSign(sign);
        }
        
        public System.Threading.Tasks.Task setClientSignAsync(DeviceMonitor.ServiceReference1.Sign sign) {
            return base.Channel.setClientSignAsync(sign);
        }
        
        public void setSignIsCustom(bool isCustom) {
            base.Channel.setSignIsCustom(isCustom);
        }
        
        public System.Threading.Tasks.Task setSignIsCustomAsync(bool isCustom) {
            return base.Channel.setSignIsCustomAsync(isCustom);
        }
        
        public void changeFlightPlanProperty(string PropertyName, string value, string flightNo, string trainGroupID) {
            base.Channel.changeFlightPlanProperty(PropertyName, value, flightNo, trainGroupID);
        }
        
        public System.Threading.Tasks.Task changeFlightPlanPropertyAsync(string PropertyName, string value, string flightNo, string trainGroupID) {
            return base.Channel.changeFlightPlanPropertyAsync(PropertyName, value, flightNo, trainGroupID);
        }
        
        public DeviceMonitor.ServiceReference1.RoleUserRelation[] getAllGroupUser() {
            return base.Channel.getAllGroupUser();
        }
        
        public System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.RoleUserRelation[]> getAllGroupUserAsync() {
            return base.Channel.getAllGroupUserAsync();
        }
        
        public DeviceMonitor.ServiceReference1.TrainPlan[] getAllTrainingGroup() {
            return base.Channel.getAllTrainingGroup();
        }
        
        public System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.TrainPlan[]> getAllTrainingGroupAsync() {
            return base.Channel.getAllTrainingGroupAsync();
        }
        
        public DeviceMonitor.ServiceReference1.FPoint[] getPredictionLineByDistance(string trainGroupId, string flightId, double getPredictionLineByDistance1) {
            return base.Channel.getPredictionLineByDistance(trainGroupId, flightId, getPredictionLineByDistance1);
        }
        
        public System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.FPoint[]> getPredictionLineByDistanceAsync(string trainGroupId, string flightId, double getPredictionLineByDistance) {
            return base.Channel.getPredictionLineByDistanceAsync(trainGroupId, flightId, getPredictionLineByDistance);
        }
        
        public DeviceMonitor.ServiceReference1.FPoint[] getPredictionLineByTime(string trainGroupId, string flightId, long getPredictionLineByTime1) {
            return base.Channel.getPredictionLineByTime(trainGroupId, flightId, getPredictionLineByTime1);
        }
        
        public System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.FPoint[]> getPredictionLineByTimeAsync(string trainGroupId, string flightId, long getPredictionLineByTime) {
            return base.Channel.getPredictionLineByTimeAsync(trainGroupId, flightId, getPredictionLineByTime);
        }
        
        public string getAirPortId(string trainGroupId) {
            return base.Channel.getAirPortId(trainGroupId);
        }
        
        public System.Threading.Tasks.Task<string> getAirPortIdAsync(string trainGroupId) {
            return base.Channel.getAirPortIdAsync(trainGroupId);
        }
        
        public void onlineExceptionClear(string roleName, string userName) {
            base.Channel.onlineExceptionClear(roleName, userName);
        }
        
        public System.Threading.Tasks.Task onlineExceptionClearAsync(string roleName, string userName) {
            return base.Channel.onlineExceptionClearAsync(roleName, userName);
        }
        
        public void setIsUserExecConfirm(string id, bool isConfirm, string trainGroupId) {
            base.Channel.setIsUserExecConfirm(id, isConfirm, trainGroupId);
        }
        
        public System.Threading.Tasks.Task setIsUserExecConfirmAsync(string id, bool isConfirm, string trainGroupId) {
            return base.Channel.setIsUserExecConfirmAsync(id, isConfirm, trainGroupId);
        }
        
        public void createTrainningGroupByTrainingId(DeviceMonitor.ServiceReference1.TrainPlan trainPlan) {
            base.Channel.createTrainningGroupByTrainingId(trainPlan);
        }
        
        public System.Threading.Tasks.Task createTrainningGroupByTrainingIdAsync(DeviceMonitor.ServiceReference1.TrainPlan trainPlan) {
            return base.Channel.createTrainningGroupByTrainingIdAsync(trainPlan);
        }
        
        public DeviceMonitor.ServiceReference1.FlightCallback[] getCallBackMessage() {
            return base.Channel.getCallBackMessage();
        }
        
        public System.Threading.Tasks.Task<DeviceMonitor.ServiceReference1.FlightCallback[]> getCallBackMessageAsync() {
            return base.Channel.getCallBackMessageAsync();
        }
    }
}
